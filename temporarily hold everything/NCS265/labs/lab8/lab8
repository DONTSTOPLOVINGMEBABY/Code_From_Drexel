Henry Jacobs 
CS265 -- Drexel University
Kurt Schmidt 
11/15/2020

Structs Lab: 

1.1 

/* Takes a number of seconds as an argument and returns the time of day in a 24 hour format as a struct */ 

struct time sec2hms( int secs ) 
{	
	int minutes = secs / 60 ;

	int hours = minutes / 60 ; 

	int seconds = secs % 60 ;

	while( minutes >= 60 ) 
	{
		hours += 1 ; 
		minutes -= 60 ; 
	} 

	struct time t1 = {hours, minutes, seconds} ; 

	return t1 ;  
	
} ;




1.2 Did not complete.  I found this part of the lab a bit confusing. I had trouble understanding the main function and getting through the bugs, as well as writing something that would work. I believe 1.3 should still work for this code though.  



1.3 

/* Function returns the heap instances pointed to by to an array to the heap. 
** Function checks every position for null-pointer to avoid memory leak ****/ 

void freePeople( person* a[], size_t n )
{
	for( int i=0; i<n && a[i] != NULL; ++i ) 
	{
		free( a[i] ) ; 
		a[i] = NULL ; 
	}
	free( a ) ; 
}




Lists Lab


2.1 

/* A function that takes a list and returns its length by
** looping through the list until it reaches NULL node */

size_t listLength(const sNode *L)
{
   size_t i = 0 ;
   while(L!= NULL)
   {
      i++ ;
      L=L->next;
   }
   return(i) ;
}



2.2 

/* A function that reverses a linked list in place using three  **
** pointers. The first pointer is passed to the function as an  **
** argument (L) and represents the current node of the loop     **
** body. L will always lag behind nextNode for the majority of  **
** the loop, as it is used to update the other pointers.        **
** It is updated at the end of the loop, so that it is current  **
** before it checks the loop conditional and begins the next    **
** iteration. Once the loop is completed, previousNode and      ** 
** nextNode return to NULL, and all that has changed is that    **
** L's next pointer now points in the opposite order.           */

sNode* listRev( sNode *L )
{

   struct sNode *previousNode = NULL,
                *nextNode = NULL ;

   while( L != NULL )
   {
      nextNode = L->next ; // We first set nextNode ahead of our current node (L) so that it is always pointing to the next node in the list and can be used to update our current node at the end of the loop body before the next iteration. 

      L->next = previousNode ; // Redirects L's next pointer from pointing to the node ahead to pointing to the previous node in the list, reversing the order. Instead of next pointing to the node in front, it now points to the node    behind it. 

      previousNode = L ; // The current node now becomes the previous node.

      L = nextNode ; // The current node is now updated to the next node. 
   }

   L = previousNode ; // Since L was our current node and is now NULL, we now point L to the new head of our list. 


   return( L ) ;
}

